{"backend_state":"init","connection_file":"/projects/ab30f689-b6af-4a46-9708-3e4f6e67dbc6/.local/share/jupyter/runtime/kernel-9305dabc-cfaa-47ee-bbc9-8ba9fcb168cc.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"4bfae9","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6ae75a","input":"","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"904590","input":"","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d402eb","input":"","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e4aa02","input":"","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fb49db","input":"","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"97eb98","input":"from sklearn.linear_model import LogisticRegression\n\n\nlr = LogisticRegression()\n\n\nlr.fit(X_train, y_train)\n\n\ny_pred = lr.predict(X_test)","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"b5e3a3","input":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\naccuracy2 = accuracy*100\naccuracy3 = round(accuracy2, 1)\nprint('Accuracy of test set: ', accuracy3, '%')","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy of test set:  84.6 %\n"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"debfa0","input":"\n#first, we split up our feature and target variables\nX = diabetes3[['Glucose','Pregnancies','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']].to_numpy() #REPLACE THIS CODE with feature variables\ny = diabetes3[['Outcome']].to_numpy()","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"752b32","input":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, train_pred)\naccuracy","output":{"0":{"data":{"text/plain":"0.782051282051282"},"exec_count":15,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"a139a7","input":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\ncf = confusion_matrix(y_test, y_pred)\nfig = px.imshow(cf, text_auto = True)\n\nfig.update_layout(\n    title_text = 'Confusion Matrix of Random Forest',\n    xaxis={'title': 'Predicted Values'}, \n    yaxis={'title': 'Actual Values'}\n)","output":{"0":{"data":{"iframe":"500f3d9f1ecde738952113a01d87da3f0cec21ae"},"exec_count":20,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"00bda7","input":"sns.pairplot(\n    diabetes3,\n    y_vars=['Glucose'])","output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.PairGrid at 0x7f45ae0d8820>"},"exec_count":21,"output_type":"execute_result"},"1":{"data":{"image/png":"ba79fa5955413838dfdc54eca1797e6ed0194d06","text/plain":"<Figure size 1620x180 with 10 Axes>"},"exec_count":21,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"ec5835","input":"fig = plt.figure(figsize=(12,12))\nax=fig.add_subplot(projection='3d')\nimg=ax.scatter(diabetes3['Glucose'],diabetes3['BMI'],diabetes3['Outcome'],c=diabetes3['Age'],cmap=plt.hot())\nfig.colorbar(img)\nplt.show()","output":{"0":{"data":{"image/png":"7840f1ada1ab54a442e6635a396add49de254a70","text/plain":"<Figure size 864x864 with 2 Axes>"},"exec_count":22,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"4cdd87","input":"from sklearn.model_selection import train_test_split\nX = diabetes3[['Glucose', 'BMI', 'Age', 'DiabetesPedigreeFunction', 'Insulin','BloodPressure', 'Pregnancies', 'SkinThickness']]\ny = diabetes3[['Outcome']]\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8, random_state=42) ","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"3ae66a","input":"fig = px.scatter(diabetes3, x = 'Glucose', y = 'Insulin')\nfig.show()","output":{"0":{"data":{"iframe":"2ab3a4e764bbb1408bf414308fc803f4046f7c81"},"exec_count":24,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"c104f9","input":"#import libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings('ignore')","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"e6abd7","input":"diabetes = pd.read_csv('./Data/diabetes.csv')\ndiabetes","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pregnancies</th>\n      <th>Glucose</th>\n      <th>BloodPressure</th>\n      <th>SkinThickness</th>\n      <th>Insulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigreeFunction</th>\n      <th>Age</th>\n      <th>Outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6</td>\n      <td>148</td>\n      <td>72</td>\n      <td>35</td>\n      <td>0</td>\n      <td>33.6</td>\n      <td>0.627</td>\n      <td>50</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>85</td>\n      <td>66</td>\n      <td>29</td>\n      <td>0</td>\n      <td>26.6</td>\n      <td>0.351</td>\n      <td>31</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>183</td>\n      <td>64</td>\n      <td>0</td>\n      <td>0</td>\n      <td>23.3</td>\n      <td>0.672</td>\n      <td>32</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>89</td>\n      <td>66</td>\n      <td>23</td>\n      <td>94</td>\n      <td>28.1</td>\n      <td>0.167</td>\n      <td>21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>137</td>\n      <td>40</td>\n      <td>35</td>\n      <td>168</td>\n      <td>43.1</td>\n      <td>2.288</td>\n      <td>33</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>763</th>\n      <td>10</td>\n      <td>101</td>\n      <td>76</td>\n      <td>48</td>\n      <td>180</td>\n      <td>32.9</td>\n      <td>0.171</td>\n      <td>63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>764</th>\n      <td>2</td>\n      <td>122</td>\n      <td>70</td>\n      <td>27</td>\n      <td>0</td>\n      <td>36.8</td>\n      <td>0.340</td>\n      <td>27</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>765</th>\n      <td>5</td>\n      <td>121</td>\n      <td>72</td>\n      <td>23</td>\n      <td>112</td>\n      <td>26.2</td>\n      <td>0.245</td>\n      <td>30</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>766</th>\n      <td>1</td>\n      <td>126</td>\n      <td>60</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.1</td>\n      <td>0.349</td>\n      <td>47</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>767</th>\n      <td>1</td>\n      <td>93</td>\n      <td>70</td>\n      <td>31</td>\n      <td>0</td>\n      <td>30.4</td>\n      <td>0.315</td>\n      <td>23</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>768 rows Ã— 9 columns</p>\n</div>","text/plain":"     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n0              6      148             72             35        0  33.6   \n1              1       85             66             29        0  26.6   \n2              8      183             64              0        0  23.3   \n3              1       89             66             23       94  28.1   \n4              0      137             40             35      168  43.1   \n..           ...      ...            ...            ...      ...   ...   \n763           10      101             76             48      180  32.9   \n764            2      122             70             27        0  36.8   \n765            5      121             72             23      112  26.2   \n766            1      126             60              0        0  30.1   \n767            1       93             70             31        0  30.4   \n\n     DiabetesPedigreeFunction  Age  Outcome  \n0                       0.627   50        1  \n1                       0.351   31        0  \n2                       0.672   32        1  \n3                       0.167   21        0  \n4                       2.288   33        1  \n..                        ...  ...      ...  \n763                     0.171   63        0  \n764                     0.340   27        0  \n765                     0.245   30        0  \n766                     0.349   47        1  \n767                     0.315   23        0  \n\n[768 rows x 9 columns]"},"exec_count":26,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"59cb74","input":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\n\ndiabetes2 =diabetes[diabetes['Insulin'] < 600]","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"187bd4","input":"from sklearn.model_selection import train_test_split\nX = diabetes3[['Glucose', 'BMI', 'Age','DiabetesPedigreeFunction']]\ny = diabetes3[['Outcome']]\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8, random_state=42) ","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"74c5bb","input":"rf = RandomForestClassifier()\n\nrf.fit(X_train, y_train)\n\ny_pred = rf.predict(X_test)","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"d7a8aa","input":"#insert correlation heatmap here\ncorr = diabetes.corr()\ncorr_rounded = np.round(corr, 2)\n\nimport plotly.express as px\nfig = px.imshow(corr_rounded, text_auto = True)\n\nfig.update_layout(\n    width = 500, \n    height = 500,\n    title_text = 'Correlation Heatmap of Data'\n)\nfig.show()","output":{"0":{"data":{"iframe":"065d6088f4817556d7e73223e070a5611dab5203"},"exec_count":3,"output_type":"execute_result"}},"pos":5,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"b29590","input":"l=[]\nfor i in range(1,51):\n    from sklearn.neighbors import KNeighborsClassifier\n    neigh = KNeighborsClassifier(n_neighbors=i) \n    neigh.fit(X_train, y_train)\n    train_pred=neigh.predict(X_test)\n    from sklearn.metrics import accuracy_score\n    accuracy = accuracy_score(y_test, train_pred)\n    l.append(accuracy)\nplt.plot(l)\nprint([9])\nprint(l[10])\nprint(l[11])\nmax(l)","output":{"0":{"name":"stdout","output_type":"stream","text":"[9]\n0.8076923076923077\n0.8333333333333334\n"},"1":{"data":{"text/plain":"0.8717948717948718"},"exec_count":31,"output_type":"execute_result"},"2":{"data":{"image/png":"7d66966ee8388609fe3fff48f375c23275dcc8bf","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":31,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":27,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"4511bb","input":"from sklearn.neighbors import KNeighborsClassifier\n\n#set a variable equal to the k-nn object\nneigh = KNeighborsClassifier(n_neighbors=47) #number of neighbors should always be odd so that there isn't a tie!\n\n#fit the model to the training data using .fit(X_train, y_train)\nneigh.fit(X_train, y_train)\n\n#predict using the test set using .predict(X_test)\ntrain_pred=neigh.predict(X_test)\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, train_pred)\nprint(round(accuracy,4)*100,'%')","output":{"0":{"name":"stdout","output_type":"stream","text":"85.9 %\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"9f0758","input":"accuracy_rf = accuracy_score(y_test,y_pred)\nprint(\"Accuracy score:\", accuracy_rf*100, \"%\")","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy score: 80.76923076923077 %\n"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"1403f5","input":"dft = pd.read_csv(\"./Data/diabetes.csv\")\nfig7 = px.scatter(dft, x=\"BMI\", y=\"Glucose\", title = \"How High Glucose Levels Lead to a High Risk of Diabetes\", color='Outcome')\nfig7.show()","output":{"0":{"data":{"iframe":"bcf5e3f82267cfcb49ca080c321f549078cd192e"},"exec_count":4,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"36abb8","input":"fig = px.scatter(diabetes, x = 'Glucose', y = 'Outcome')\nfig.show()","output":{"0":{"data":{"iframe":"081813f018efafe04450835a631fbc5c3ffdfbbc"},"exec_count":5,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"736d73","input":"# can include more visualizations :)","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"d48a55","input":"diabetes2 =diabetes[diabetes['Insulin'] < 600]\ndiabetes3=diabetes2[diabetes2['Insulin'] > 0]\ndiabetes3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pregnancies</th>\n      <th>Glucose</th>\n      <th>BloodPressure</th>\n      <th>SkinThickness</th>\n      <th>Insulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigreeFunction</th>\n      <th>Age</th>\n      <th>Outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>89</td>\n      <td>66</td>\n      <td>23</td>\n      <td>94</td>\n      <td>28.1</td>\n      <td>0.167</td>\n      <td>21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>137</td>\n      <td>40</td>\n      <td>35</td>\n      <td>168</td>\n      <td>43.1</td>\n      <td>2.288</td>\n      <td>33</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>3</td>\n      <td>78</td>\n      <td>50</td>\n      <td>32</td>\n      <td>88</td>\n      <td>31.0</td>\n      <td>0.248</td>\n      <td>26</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2</td>\n      <td>197</td>\n      <td>70</td>\n      <td>45</td>\n      <td>543</td>\n      <td>30.5</td>\n      <td>0.158</td>\n      <td>53</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>5</td>\n      <td>166</td>\n      <td>72</td>\n      <td>19</td>\n      <td>175</td>\n      <td>25.8</td>\n      <td>0.587</td>\n      <td>51</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>753</th>\n      <td>0</td>\n      <td>181</td>\n      <td>88</td>\n      <td>44</td>\n      <td>510</td>\n      <td>43.3</td>\n      <td>0.222</td>\n      <td>26</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>755</th>\n      <td>1</td>\n      <td>128</td>\n      <td>88</td>\n      <td>39</td>\n      <td>110</td>\n      <td>36.5</td>\n      <td>1.057</td>\n      <td>37</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>760</th>\n      <td>2</td>\n      <td>88</td>\n      <td>58</td>\n      <td>26</td>\n      <td>16</td>\n      <td>28.4</td>\n      <td>0.766</td>\n      <td>22</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>763</th>\n      <td>10</td>\n      <td>101</td>\n      <td>76</td>\n      <td>48</td>\n      <td>180</td>\n      <td>32.9</td>\n      <td>0.171</td>\n      <td>63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>765</th>\n      <td>5</td>\n      <td>121</td>\n      <td>72</td>\n      <td>23</td>\n      <td>112</td>\n      <td>26.2</td>\n      <td>0.245</td>\n      <td>30</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>390 rows Ã— 9 columns</p>\n</div>","text/plain":"     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n3              1       89             66             23       94  28.1   \n4              0      137             40             35      168  43.1   \n6              3       78             50             32       88  31.0   \n8              2      197             70             45      543  30.5   \n14             5      166             72             19      175  25.8   \n..           ...      ...            ...            ...      ...   ...   \n753            0      181             88             44      510  43.3   \n755            1      128             88             39      110  36.5   \n760            2       88             58             26       16  28.4   \n763           10      101             76             48      180  32.9   \n765            5      121             72             23      112  26.2   \n\n     DiabetesPedigreeFunction  Age  Outcome  \n3                       0.167   21        0  \n4                       2.288   33        1  \n6                       0.248   26        1  \n8                       0.158   53        1  \n14                      0.587   51        1  \n..                        ...  ...      ...  \n753                     0.222   26        1  \n755                     1.057   37        1  \n760                     0.766   22        0  \n763                     0.171   63        0  \n765                     0.245   30        0  \n\n[390 rows x 9 columns]"},"exec_count":8,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"0e577a","input":"_k\\-Nearest Neighbors works by_ finding the distances between a query and points in a dataset and classifying the query based on the data points closest to the query.\n","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"2c093f","input":"This visualization shows that the higher the amount of Glucose that is present, the chances of Diabetes rises.\n\n","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"300d91","input":"*In one or two sentences, explain how random forests work!*\n\n","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"333450","input":"# _Main Project_\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"4118ac","input":"#### Random Forest","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"49daa4","input":"_This visualization shows the correlation between high levels of Glucose combined with an above\\-average BMI contributing to whether or not a patient has Diabetes._\n","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"5faee9","input":"#### Logistic Regression","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"631618","input":"*write conclusion here*","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"6b20e3","input":"_Logistic regression is used to find the outcome based on prior observation, We are using logistic regression for finding what has the highest probability of being correct._\n\n","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"9f36c3","input":"### Exploratory Data Analysis","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"9fd190","input":"_This project will help doctors determine a patient's risk of Diabetes_\n","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"b346d2","input":"_This graph shows that Glucose and Insulin are typically in relation to one another. If one of the two values rise, the second value is most likely going to stay with it_ with a few exceptions.\n\n","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"ba0dc3","input":"### Machine Learning Models","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"c78123","input":"### Conclusion","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"d3d850","input":"which model performed the best? (highest accuracy? lowest error rate?) \n\nwhat were some limitations that we had in this project? (look at product spec)\n\nwhat now? -- how can we apply this to the real world? what further research could be done?","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"e30c6b","input":"#### k-Nearest Neighbors\n\n","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"f73a8f","input":"A heatmaps main purpose is to display the correlation between features in a dataset. If you look above you are able to see all the features: Glucose, BMI, etc. and their correlation to the outcome. \n\n*which features have a highest correlation? which features have the lowest? how does this impact which features you choose to use in your models?*\n\n","pos":6,"type":"cell"}
{"id":0,"time":1655756200028,"type":"user"}
{"last_load":1655827823585,"type":"file"}